# Jenkins CI/CD Pipeline 研修資料
## 新人エンジニア向け

---

## 📋 目次

1. CI/CD Pipelineの基礎
2. Jenkinsの概要
3. Jenkins環境構築
4. Jenkinsfileの作成
5. 実践演習とベストプラクティス

---

## セクション1: CI/CD Pipelineとは

### 🎯 学習目標
- CI/CDの概念を理解する
- 従来の開発プロセスとの違いを説明できる

### CI (Continuous Integration) とは
- **継続的インテグレーション**
- コードの変更を頻繁にメインブランチに統合
- 自動ビルド・自動テストで品質を担保

### CD (Continuous Delivery/Deployment) とは
- **Continuous Delivery**: 本番環境へのリリース準備を自動化
- **Continuous Deployment**: 本番環境への自動デプロイ

### 💡 なぜCI/CDが必要？
- バグの早期発見
- リリースサイクルの高速化
- 手作業によるミスの削減
- チーム全体の生産性向上

---

## セクション2: WaterfallとAgileの違い

### 🌊 Waterfall（ウォーターフォール）
```
要件定義 → 設計 → 実装 → テスト → リリース
```
- **特徴**: 各工程を順番に完了
- **メリット**: 計画が明確
- **デメリット**: 変更に弱い、リリースまで時間がかかる

### 🔄 Agile（アジャイル）
```
計画 → 開発 → テスト → リリース → フィードバック → 改善
（短いサイクルで繰り返し）
```
- **特徴**: 小さな単位で反復開発
- **メリット**: 変更に強い、早期リリース
- **CI/CDとの相性**: 抜群！

---

## セクション3: CI (Continuous Integration) とは何か？

### 📊 CIの仕組み

```
開発者 → コミット → Git → Jenkins起動
                              ↓
                         自動ビルド
                              ↓
                         自動テスト
                              ↓
                    結果通知（成功/失敗）
```

### ✅ CIの主な機能
1. **自動ビルド**: コードをコンパイル
2. **自動テスト**: ユニットテスト実行
3. **コード品質チェック**: Lintやコードカバレッジ
4. **フィードバック**: Slack、メールで通知

### 🎯 CIのメリット
- コード統合時の問題を即座に検知
- 「私の環境では動く」問題の解消
- レビュー前にバグを発見

---

## セクション4: CD (Continuous Delivery) とは何か？

### 🚀 CDの仕組み

```
CI成功 → ステージング環境デプロイ
           ↓
      受け入れテスト
           ↓
     【手動承認】← Continuous Delivery
           ↓
     本番環境デプロイ ← Continuous Deployment（自動）
```

### 📦 Continuous Delivery vs Continuous Deployment

| 項目 | Continuous Delivery | Continuous Deployment |
|------|-------------------|---------------------|
| 本番デプロイ | 手動承認が必要 | 完全自動 |
| リスク | 中程度 | 高い |
| 適用場面 | エンタープライズ | スタートアップ |

### ⚠️ CD導入の注意点
- ロールバック戦略の準備
- モニタリング体制の構築
- セキュリティチェックの自動化

---

## セクション5: CI/CD vs DevOpsの違い

### 🔧 CI/CD
- **技術的プラクティス**
- 自動化ツールとパイプライン
- 開発とリリースプロセスに焦点

### 🤝 DevOps
- **文化と哲学**
- 開発と運用の協業
- CI/CDを含む広範な取り組み

```
DevOps ⊃ CI/CD
DevOps = 文化 + プロセス + ツール（CI/CDなど）
```

---

## セクション6: Jenkinsとは

### 🤖 Jenkinsの概要
- **オープンソースの自動化サーバー**
- CI/CDパイプラインを構築するツール
- Java製、プラグインで機能拡張可能

### 💪 Jenkinsの強み
- 豊富なプラグイン（1,800以上）
- 大規模な導入実績
- 柔軟なパイプライン設定
- コミュニティが活発

### 🌐 Jenkinsの構成
- **Masterノード**: パイプライン管理
- **Agentノード**: 実際のジョブ実行
- **プラグイン**: 機能拡張

---

## セクション7: Jenkins Freestyle jobとは

### 📝 Freestyle jobの特徴
- **GUIベースの設定**
- 初心者に優しい
- シンプルなジョブ向け

### 🎨 Freestyle jobの設定項目
1. **ソースコード管理**: Git, SVNなど
2. **ビルドトリガー**: スケジュール、Webhook
3. **ビルド手順**: シェルスクリプト実行
4. **ビルド後の処理**: 成果物の保存、通知

### ⚠️ Freestyle jobの限界
- 複雑なパイプラインには不向き
- コードとして管理できない
- バージョン管理が困難

→ **Pipelineの登場！**

---

## セクション8: Jenkins Pipelineとは

### 🚀 Pipelineの特徴
- **コードとしてのパイプライン (Pipeline as Code)**
- Jenkinsfileで定義
- バージョン管理可能
- 複雑なワークフロー対応

### 📄 Jenkinsfile
```groovy
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                sh 'npm install'
            }
        }
        stage('Test') {
            steps {
                sh 'npm test'
            }
        }
        stage('Deploy') {
            steps {
                sh './deploy.sh'
            }
        }
    }
}
```

### ✅ Pipelineのメリット
- チーム全体で共有可能
- レビュー・変更履歴の追跡
- 再現性が高い

---

## セクション9: Jenkinsのインストール (AWS EC2)

### ☁️ EC2環境準備

**1. EC2インスタンス起動**
- Ubuntu Server推奨
- セキュリティグループでポート8080を開放

**2. Javaインストール**
```bash
sudo apt update
sudo apt install openjdk-11-jdk -y
java -version
```

**3. Jenkinsインストール**
```bash
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update
sudo apt install jenkins -y
```

**4. Jenkins起動**
```bash
sudo systemctl start jenkins
sudo systemctl enable jenkins
```

---

## セクション10: Jenkins初期設定

### 🔑 初期パスワード取得
```bash
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
```

### 📥 初期セットアップ手順

1. **ブラウザでアクセス**: `http://YOUR_EC2_IP:8080`
2. **初期パスワード入力**
3. **プラグインインストール**: 推奨プラグインを選択
4. **管理者ユーザー作成**
5. **Jenkins URL設定**

### 🔌 必須プラグイン
- Git plugin
- Pipeline plugin
- Docker plugin
- Slack Notification (オプション)

---

## セクション11: Jenkins Dashboardの解説

### 🎛️ Dashboard構成

**左側メニュー**
- 新規ジョブ作成
- ビルド履歴
- システム設定
- プラグイン管理

**メイン画面**
- ジョブ一覧
- ビルドステータス
- ビルド履歴グラフ

### 📊 ビルドステータス
- ☀️ **青**: 成功
- 🌧️ **黄**: 不安定（テスト失敗あり）
- ⛈️ **赤**: 失敗

### 💡 よく使う機能
- **Build Now**: 手動ビルド実行
- **Configure**: ジョブ設定
- **Console Output**: ログ確認

---

## セクション12: Jenkinsプラグイン

### 🧩 プラグインの役割
Jenkinsの機能を拡張する追加モジュール

### 📦 カテゴリ別主要プラグイン

**ソース管理**
- Git Plugin
- GitHub Plugin

**ビルドツール**
- Maven Plugin
- Gradle Plugin
- NodeJS Plugin

**デプロイ**
- Deploy to container Plugin
- Kubernetes Plugin

**通知**
- Slack Notification
- Email Extension

### ⚙️ プラグインインストール方法
1. Manage Jenkins → Manage Plugins
2. Available タブで検索
3. インストール → 再起動

---

## セクション13: Jenkins Security

### 🔒 セキュリティの重要性
- 外部からの不正アクセス防止
- 機密情報の保護
- 権限管理

### 👥 認証とアクセス制御

**1. ユーザー管理**
- Jenkins独自のDB
- LDAP連携
- SSO (Single Sign-On)

**2. 権限設定**
- Matrix-based security
- Project-based Matrix
- Role-based Strategy (Plugin)

### 🛡️ セキュリティベストプラクティス
- 定期的なアップデート
- Credentialsの暗号化
- セキュリティプラグインの活用
- 監査ログの有効化
- 不要なプラグインの削除

---

## セクション14: Best Practice - Private Git Repoへのcommitでジョブトリガー

### 🎯 目標
プライベートGitリポジトリへのコミットで自動的にJenkinsジョブを実行

### 🔑 Credential設定

**1. SSH Keyペア作成**
```bash
ssh-keygen -t rsa -b 4096 -C "jenkins@example.com"
```

**2. JenkinsにCredential登録**
- Manage Jenkins → Manage Credentials
- SSH Username with private key を選択
- 秘密鍵を貼り付け

**3. GitHubに公開鍵登録**
- Settings → Deploy keys
- 公開鍵を追加

### 🔗 Webhook設定

**GitHub側**
- Settings → Webhooks → Add webhook
- Payload URL: `http://JENKINS_URL/github-webhook/`
- Content type: application/json
- Events: Just the push event

**Jenkins側**
- ジョブ設定 → Build Triggers
- "GitHub hook trigger for GITScm polling" にチェック

---

## セクション15: Jenkinsfileの作成

### 📝 Jenkinsfileの配置
- リポジトリのルートに `Jenkinsfile` を作成
- パイプライン定義をコード化

### 🏗️ 基本構造

```groovy
pipeline {
    agent any  // どのagentで実行するか
    
    environment {
        // 環境変数定義
        NODE_ENV = 'production'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building...'
                sh 'npm install'
                sh 'npm run build'
            }
        }
        
        stage('Test') {
            steps {
                echo 'Testing...'
                sh 'npm test'
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'Deploying...'
                sh './deploy.sh'
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
```

---

## セクション16: Jenkinsfileの高度な機能

### 🎨 並列実行

```groovy
stage('Parallel Tests') {
    parallel {
        stage('Unit Test') {
            steps {
                sh 'npm run test:unit'
            }
        }
        stage('Integration Test') {
            steps {
                sh 'npm run test:integration'
            }
        }
    }
}
```

### 🔀 条件分岐

```groovy
stage('Deploy to Production') {
    when {
        branch 'main'
    }
    steps {
        sh './deploy-prod.sh'
    }
}
```

### 📦 成果物の保存

```groovy
post {
    always {
        archiveArtifacts artifacts: 'dist/**/*', fingerprint: true
        junit 'test-results/*.xml'
    }
}
```

---

## セクション17: 上級編 - Bitbucketとの統合

### 🔗 Bitbucket連携

**必要なプラグイン**
- Bitbucket Plugin
- Bitbucket Branch Source Plugin

**Webhook設定**
```
URL: http://JENKINS_URL/bitbucket-hook/
Trigger: Repository push
```

**Jenkinsfile (Bitbucket用)**
```groovy
pipeline {
    agent any
    
    options {
        skipDefaultCheckout(true)
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'git@bitbucket.org:team/repo.git',
                        credentialsId: 'bitbucket-ssh-key'
                    ]]
                ])
            }
        }
        // その他のstage
    }
}
```

---

## セクション18: BONUS - インスタクトへの応用

### 💰 実践シナリオ
**報酬制度**: 月10回の正解で3000円のサイトクレジット

### 🎯 Jenkins活用例

**1. 自動テスト環境**
- 提出前にコード品質チェック
- 自動で正解判定テスト実行

**2. デプロイ自動化**
- 正解時に自動でポイント加算APIコール
- 統計レポート自動生成

**3. チーム協業**
- 共有Jenkinsfileで品質担保
- レビュー前にCI通過を必須化

### 📊 成功のポイント
- 小さく始めて徐々に拡大
- 失敗から学ぶ
- ドキュメント化

---

## 📚 理解度チェック

### ✅ 各セクション後の確認項目

**セクション1-2: 基礎概念**
- [ ] CI/CDの違いを説明できる
- [ ] WaterfallとAgileの違いを理解している

**セクション3-5: CI/CD詳細**
- [ ] CIの仕組みを図解できる
- [ ] Continuous DeliveryとDeploymentの違いを説明できる

**セクション6-8: Jenkins基礎**
- [ ] Jenkinsの役割を理解している
- [ ] Freestyle jobとPipelineの違いを説明できる

**セクション9-13: Jenkins実践**
- [ ] Jenkinsをインストールできる
- [ ] 基本的なセキュリティ設定ができる

**セクション14-17: 実装**
- [ ] Webhookを設定できる
- [ ] 基本的なJenkinsfileを作成できる

---

## 🎓 次のステップ

### 学習の進め方

**Step 1**: ローカル環境でJenkinsを動かす
**Step 2**: シンプルなパイプラインを作成
**Step 3**: Gitリポジトリと連携
**Step 4**: 自動テスト・デプロイを実装

### 📖 参考リソース
- Jenkins公式ドキュメント
- Jenkins Pipeline Syntax
- コミュニティフォーラム

### 🤝 サポート
質問・不明点は気軽にメンターに相談してください！

---

## まとめ

### 🎯 本研修で学んだこと
1. CI/CDの基本概念と重要性
2. Jenkinsの基本操作
3. Pipelineの作成方法
4. 実践的なベストプラクティス

### 💪 これからの活躍に期待！
- まずは小さなプロジェクトから
- 失敗を恐れず挑戦
- チームで知識を共有


Jenkins ローカルPC セットアップ＆ビルド実践ガイド

初期設定からビルド実行まで

Jenkins ローカルPC セットアップ＆ビルド実践ガイド

初期設定からビルド実行まで

**がんばってください！** 🚀
